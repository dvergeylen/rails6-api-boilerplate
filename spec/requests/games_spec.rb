require 'rails_helper'
require 'uri'
require 'net/http'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/games", type: :request do
  before(:context) do
    @user = create(:user)
  end

  after(:context) do
    @user.destroy
  end


  # This should return the minimal set of attributes required to create a valid
  # Game. As you add validations to Game, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:game).merge({user_id: @user.id})
  }

  let(:invalid_attributes) {
    {
      name: nil
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # GamesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    if @headers.nil?
      # Ask a new valid token to Auth0
      url = URI("#{Rails.application.credentials[Rails.env.to_sym][:auth0_tenant_url]}/oauth/token")
      http = Net::HTTP.new(url.host, url.port)
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE

      request = Net::HTTP::Post.new(url)
      request["content-type"] = 'application/json'
      request.body = {
            client_id: Rails.application.credentials[Rails.env.to_sym][:auth0_client_id],
        client_secret: Rails.application.credentials[Rails.env.to_sym][:auth0_client_secret],
             audience: Rails.application.credentials[Rails.env.to_sym][:auth0_api_audience],
           grant_type: "client_credentials"
      }.to_json

      response = http.request(request)
      body = JSON.parse(response.read_body)
      @headers = {
       'Authorization': "#{body["token_type"]} #{body["access_token"]}"
      }
    end
    @headers
  }

  describe "GET /index" do
    it "renders a successful response" do
      game = Game.create! valid_attributes
      get user_games_url(@user.id), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      game = Game.create! valid_attributes
      get user_game_url(@user, game), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Game" do
        expect {
          post user_games_url(@user.id),
               params: { game: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Game, :count).by(1)
      end

      it "renders a JSON response with the new game" do
        post user_games_url(@user.id),
             params: { game: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Game" do
        expect {
          post user_games_url(@user.id),
               params: { game: invalid_attributes }, as: :json
        }.to change(Game, :count).by(0)
      end

      it "renders a JSON response with errors for the new game" do
        post user_games_url(@user.id),
             params: { game: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        attributes_for(:archived_game).merge({ user_id: @user.id})
      }

      it "updates the requested game" do
        game = Game.create! valid_attributes
        game_new_attributes = new_attributes
        patch user_game_url(@user.id, game),
              params: { game: game_new_attributes }, headers: valid_headers, as: :json
        game.reload

        expect(game.name).to     eq(game_new_attributes[:name])
        expect(game.archived).to eq(game_new_attributes[:archived])
      end

      it "renders a JSON response with the game" do
        game = Game.create! valid_attributes
        patch user_game_url(@user.id, game),
              params: { game: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the game" do
        game = Game.create! valid_attributes
        patch user_game_url(@user.id, game),
              params: { game: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq("application/json; charset=utf-8")
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested game" do
      game = Game.create! valid_attributes
      expect {
        delete user_game_url(@user.id, game), headers: valid_headers, as: :json
      }.to change(Game, :count).by(-1)
    end
  end
end
